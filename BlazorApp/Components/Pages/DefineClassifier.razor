@page "/defineClassifier"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using DbContext = BlazorApp.DbContext

@inject DbContext DbContext
@inject AncHandler AncHandler
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div style="display:flex; flex-direction: column">
    <h2>Toote nimi: @mapping?.ProductName</h2>
    <h3>Kogus arvel: ???</h3>
    <input @bind="@query" @oninput="@QueryChanged" @onkeypress="QueryKeyPress"/>
    <select multiple="multiple" style="height:1000px" @bind="@selectedClassifier" @onkeypress="SelectKeyPress">
        @foreach (var classifier in classifiers)
        {
            <option value="@classifier.Id">@classifier.Name</option>
        }
    </select>
    @if (classifiers.SingleOrDefault(c => c.Id == selectedClassifier[0]) is {Unit: "kg"})
    {
        <label class="form-label" style="margin-top: 1em">Sisesta toote kaal grammides</label>
    }
    else
    {
        <label class="form-label" style="margin-top: 1em">Sisesta toote kogus tükkides</label>
    }
    <NumberInput TValue="int" @bind-Value="@multiplier" @onkeypress="MultiplierKeyPress"></NumberInput>
    <button class="btn btn-primary" style="margin-top: 1em" @onclick="SaveClassifier">Salvesta</button>
    <button class="btn" style="margin-top: 5em"@onclick="RefreshClassifiers">Värskenda ANC kaupade nimekirja</button>
</div>



@code {
    private List<AncClassifier> dbClassifiers = new ();
    private List<AncClassifier> classifiers = new ();
    private int[] selectedClassifier = new int[1];
    private int multiplier = 1000;
    private AncClassifierMapping? mapping;
    private string? query;

    protected override async Task OnInitializedAsync()
    {
        dbClassifiers = await DbContext.AncClassifiers.OrderBy(classifier => classifier.Name).ToListAsync();
        dbClassifiers.Add(new AncClassifier(-1, "!!!ÄRA SISESTA ANCsse!!!", "", 0));
        classifiers = dbClassifiers;
        await LoadUnmappedMapping();
    }

    private async Task LoadUnmappedMapping()
    {
        mapping = await DbContext.AncClassifierMappings.FirstOrDefaultAsync(m => m.AncClassifierId == 0);
        if (mapping == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SaveClassifier()
    {
        DbContext.AncClassifierMappings.Entry(mapping).CurrentValues.SetValues(mapping with { AncClassifierId = selectedClassifier[0], Multiplier = dbClassifiers.Single(c => c.Id == selectedClassifier[0]).Unit == "kg" ? multiplier : multiplier*1000});
        await DbContext.SaveChangesAsync();
        selectedClassifier[0] = 0;
        multiplier = 1000;
        query = "";
        QueryChanged(new ChangeEventArgs(){Value = ""});
        await LoadUnmappedMapping();
    }

    private async Task RefreshClassifiers()
    {
        var classifiers = await AncHandler.GetAncClassifiers();
        var existingClassifiers = await DbContext.AncClassifiers.ToArrayAsync();
        foreach (var classifier in classifiers)
        {
            if (existingClassifiers.FirstOrDefault(ec => ec.Id == classifier.Id) is { })
                continue;
            else
                DbContext.AncClassifiers.Add(classifier);
        }
        await DbContext.SaveChangesAsync();
        await OnInitializedAsync();
    }

    private void QueryChanged(ChangeEventArgs obj)
    {
        classifiers = dbClassifiers.Where(c => c.Name.Contains(obj.Value as string, StringComparison.InvariantCultureIgnoreCase)).OrderBy(classifier => classifier.Name).ToList();
    }

    private void SelectKeyPress(KeyboardEventArgs obj)
    {
        if (obj.Key == "Enter")
        {
            JsRuntime.InvokeVoidAsync("moveFocus");
        }
    }

    private void QueryKeyPress(KeyboardEventArgs obj)
    {
        if (obj.Key == "Enter")
        {
            JsRuntime.InvokeVoidAsync("moveFocus");
        }
    }

    private void MultiplierKeyPress(KeyboardEventArgs obj)
    {
        if (obj.Key == "Enter")
        {
            JsRuntime.InvokeVoidAsync("moveFocus");
        }
    }

}