@page "/"
@rendermode InteractiveServer
@using InvoiceDownloader
@using Microsoft.EntityFrameworkCore
@using DbContext = BlazorApp.DbContext
@using System.Xml
@using System.Xml.Serialization
@using EInvoice
@using Invoice = InvoiceDownloader.Invoice
@using System.Text.RegularExpressions

@inject DbContext DbContext
@inject Downloader Downloader
@inject NavigationManager NavigationManager
@inject AncHandler AncHandler

<PageTitle>Arved</PageTitle>

<div style="display: flex; flex-direction: row; justify-content: space-between; margin-bottom: 1em">
    <button class="btn btn-primary" @onclick="LoadInvoices">Värskenda arved</button>
    <div style="display:flex; flex-direction: row">
        <DateInput TValue="DateOnly" @bind-Value="@startDate" Placeholder="Algus kuupäev" ></DateInput>
        <DateInput TValue="DateOnly" @bind-Value="@endDate" Placeholder="Lõpp kuupäev"></DateInput>
        <button class="btn btn-primary" @onclick="ToAnc">Lae arved ANCsse</button>
    </div>
</div>


<table class="table">
    <thead>
    <tr>
        <th>Arve nr</th>
        <th>Saatja</th>
        <th>Kuupäev</th>
        <th>Staatus</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var invoice in invoices)
    {
        <tr>
            <td>@invoice.invoice.InvoiceNo</td>
            <td>@invoice.invoice.InvoiceSender</td>
            <td>@invoice.invoice.InvoiceDate.ToString("dd.MM.yyyy")</td>
            <td>@invoice.status</td>
        </tr>
    }
    </tbody>

</table>

@code {
    private (Invoice invoice, string status)[] invoices = Array.Empty<(Invoice invoice, string status)>();
    private DateOnly startDate = DateOnly.FromDateTime(new DateTime(2024,01,01));
    private DateOnly endDate = DateOnly.FromDateTime(DateTime.Today);

    protected override async Task OnInitializedAsync()
    {
        var omnivaInvoices = await DbContext.Invoices.OrderByDescending(invoice => invoice.InvoiceDate).ToArrayAsync();
        var ancInvoices = await AncHandler.GetInvoicesInANC(startDate, endDate);
        invoices = omnivaInvoices.GroupJoin(
            ancInvoices, 
            invoice => (invoice.InvoiceNo.ToUpper(), invoice.InvoiceDate, invoice.InvoiceSender), 
            anc => anc, (invoice, matches) => (invoice, matches.Any() ? "ANCS" : "LAADIMATA"))
            .ToArray();

    }

    private async Task ToAnc()
    {
        var invoices = await DbContext.Invoices.Where(invoice => invoice.InvoiceDate >= startDate && invoice.InvoiceDate <= endDate).ToArrayAsync();
        var existingMappings = await DbContext.AncClassifierMappings.ToListAsync();
        var hasNonMapped = false;
        foreach (var invoice in invoices)
        {
            var reader = XmlReader.Create(invoice.XML.ToStream(), new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Document});
            var einvoice = new XmlSerializer(typeof(E_Invoice)).Deserialize(reader) as E_Invoice;
            foreach (var item in einvoice.Invoice[0].InvoiceItem.InvoiceItemGroup.SelectMany(group => group.ItemEntry))
            {
                var productName = item.Description.ReplaceLineEndings("");
                productName = new Regex("[0-3]?\\d\\.[0-1]\\d\\.20\\d\\d").Replace(productName, "");
                var mapping = existingMappings.SingleOrDefault(mapping => mapping.ProductName == productName);
                if (mapping is null)
                {
                    var entity = new AncClassifierMapping(0, productName, null);
                    DbContext.AncClassifierMappings.Add(entity);
                    existingMappings.Add(entity);
                    hasNonMapped = true;
                    continue;
                }

                if (mapping.AncClassifierId == 0)
                    hasNonMapped = true;

            }
        }

        await DbContext.SaveChangesAsync();
        if (hasNonMapped)
        {
            NavigationManager.NavigateTo("/defineClassifier");
            return;
        }

        var alreadyUploaded = await AncHandler.GetInvoicesInANC(startDate, endDate);
        var toBeUploaded = invoices.ExceptBy(alreadyUploaded, invoice => (invoice.InvoiceNo.ToUpper(), invoice.InvoiceDate, invoice.InvoiceSender)).ToArray();
        await AncHandler.UploadInvoices(toBeUploaded);
    }

    private async Task LoadInvoices()
    {
        var downloadInvoices = await Downloader.DownloadInvoices(startDate, endDate);
        foreach (var invoice in downloadInvoices)
        {
            Console.WriteLine($"{invoice.InvoiceNo} {invoice.InvoiceSender} {invoice.InvoiceDate}");
        }
        var existingInvoices = await DbContext.Invoices.Where(invoice => invoice.InvoiceDate >= startDate && invoice.InvoiceDate <= endDate).ToArrayAsync();
        var newInvoices = downloadInvoices
            .Where(newInvoice => !existingInvoices
                .Any(existingInvoice => 
                    newInvoice.InvoiceNo == existingInvoice.InvoiceNo 
                    && newInvoice.InvoiceSender == existingInvoice.InvoiceSender));
        await DbContext.Invoices.AddRangeAsync(newInvoices);
        await DbContext.SaveChangesAsync();
        await OnInitializedAsync();
    }
}
